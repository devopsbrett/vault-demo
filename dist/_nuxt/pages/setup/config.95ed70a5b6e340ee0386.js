webpackJsonp([8],{"K/HT":function(e,t,s){"use strict";function a(e){s("uZc3")}Object.defineProperty(t,"__esModule",{value:!0});var n=s("Zrib"),l=s("VU/8"),o=a,i=l(null,n.a,!1,o,"data-v-3aa62e94",null);t.default=i.exports},Zrib:function(e,t,s){"use strict";var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("v-layout",{attrs:{column:"","justify-center":"","align-center":""}},[s("v-flex",{attrs:{xs12:"",sm10:"",md8:""}},[s("v-card",[s("v-card-title",{staticClass:"headline"},[e._v("Modify the vault config to use the generated certificates")]),s("v-card-text",[s("p",[e._v("\n          Now that we have our SSL certificate/key pair it's time to tell vault to use them to communicate\n          over https. To do this modify "),s("code",{staticClass:"elevation-3"},[e._v("/etc/vault.conf")]),e._v(". Removing the\n          "),s("code",{staticClass:"elevation-3"},[e._v("tls_disable")]),e._v(" parameter and adding the parameters "),s("code",{staticClass:"elevation-3"},[e._v("tls_cert_file")]),e._v("\n          and "),s("code",{staticClass:"elevation-3"},[e._v("tls_key_file")]),e._v(".\n        ")])])],1),s("ul",{staticClass:"vagrantterm"},[s("li",{staticClass:"command"},[e._v("sudo vim /etc/vault.conf")]),s("li",{staticClass:"comment"},[e._v("Set the listener block to look like below")]),s("li",{staticClass:"file-contents"},[e._v('listener "tcp" {\n            address = "0.0.0.0:8200"\n            tls_key_file = "/etc/ssl/vault.key"\n            tls_cert_file = "/etc/ssl/vault.crt"\n        }\n      ')])]),s("v-card",[s("v-card-text",[s("p",[e._v("As we will have to restart vault to pick up this config change it's probably a good time to\n          also issue the rekey command so we have more than a single unseal key. In a production environment\n          we would define a number of people to act as unseal key holders, we would use this number as the value\n          for "),s("code",{staticClass:"sdf"},[e._v("-key-shares")]),e._v(". The "),s("code",{staticClass:"sdf"},[e._v("-key-threshold")]),e._v(" defines the number \n          of unseal keys needed to unseal vault. For the purpose of this tutorial we'll generate 5 unseal keys\n          and require 2 to reconstruct the master key and unseal the vault.\n        ")])])],1),s("ul",{staticClass:"vagrantterm"},[s("li",{staticClass:"command"},[e._v("vault rekey -key-shares=5 -key-threshold=2")]),s("li",{staticClass:"response"},[e._v("Rekey operation nonce: 240be445-2480-b422-381e-089ea1fdf628\n        Key (will be hidden):\n\n\n        Key 1: <UNSEAL KEY>\n        Key 2: <UNSEAL KEY>\n        Key 3: <UNSEAL KEY>\n        Key 4: <UNSEAL KEY>\n        Key 5: <UNSEAL KEY>\n\n        Operation nonce: 240be445-2480-b422-381e-089ea1fdf628\n\n        Vault rekeyed with 5 keys and a key threshold of 2. Please\n        securely distribute the above keys. When the vault is re-sealed,\n        restarted, or stopped, you must provide at least 2 of these keys\n        to unseal it again.\n\n        Vault does not store the master key. Without at least 2 keys,\n        your vault will remain permanently sealed.\n      ")]),s("li",{staticClass:"command"},[e._v("sudo systemctl restart vault")])]),s("v-card",[s("v-card-text",[s("p",[e._v("The vault server will restart in a sealed state. In order for our vault client to\n          communicate with the server we need to change "),s("code",{attrs:{code:"sdf"}},[e._v("VAULT_ADDR")]),e._v(" \n          environment variable as it's still set to communicate with vault over http and we're\n          now using https. Once this has been done you can issue the "),s("code",{staticClass:"sdf"},[e._v("vault unseal")]),e._v("\n          command until vault is unsealed\n        ")])])],1),s("ul",{staticClass:"vagrantterm"},[s("li",{staticClass:"command"},[e._v("sed -e '/VAULT_SKIP_VERIFY/d' -e 's/VAULT_ADDR=\"http:/VAULT_ADDR=\"https:/' -i ~/.bash_profile")]),s("li",{staticClass:"command"},[e._v("source .bash_profile")]),s("li",{staticClass:"command"},[e._v("vault unseal")]),s("li",{staticClass:"response"},[e._v("Key (will be hidden):\n        Sealed: true\n        Key Shares: 5\n        Key Threshold: 2\n        Unseal Progress: 1\n        Unseal Nonce: 0f518f90-e63b-2d8a-fef9-b5e22502dd51\n      ")]),s("li",{staticClass:"command"},[e._v("vault unseal")]),s("li",{staticClass:"response"},[e._v("Key (will be hidden):\n        Sealed: false\n        Key Shares: 5\n        Key Threshold: 2\n        Unseal Progress: 0\n        Unseal Nonce:\n      ")])]),s("v-card",[s("v-card-actions",[s("v-btn",{attrs:{color:"primary",flat:"",nuxt:"",to:{name:"setup-certificate"}}},[e._v("Back")]),s("v-spacer"),s("v-btn",{attrs:{color:"primary",flat:"",nuxt:"",to:{name:"setup-token"}}},[e._v("Next")])],1)],1)],1)],1)},n=[],l={render:a,staticRenderFns:n};t.a=l},mlyN:function(e,t,s){t=e.exports=s("FZ+f")(!1),t.push([e.i,"",""])},uZc3:function(e,t,s){var a=s("mlyN");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);s("rjj0")("45f2ccc4",a,!0)}});
//# sourceMappingURL=config.95ed70a5b6e340ee0386.js.map