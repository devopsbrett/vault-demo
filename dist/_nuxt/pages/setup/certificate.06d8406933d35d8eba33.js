webpackJsonp([7],{"4dQC":function(t,e,a){e=t.exports=a("FZ+f")(!1),e.push([t.i,"",""])},CuS6:function(t,e,a){var s=a("4dQC");"string"==typeof s&&(s=[[t.i,s,""]]),s.locals&&(t.exports=s.locals);a("rjj0")("a8191e26",s,!0)},EpSh:function(t,e,a){"use strict";function s(t){a("CuS6")}Object.defineProperty(e,"__esModule",{value:!0});var o=a("SJy9"),r=a("VU/8"),n=s,l=r(null,o.a,!1,n,"data-v-5451935a",null);e.default=l.exports},SJy9:function(t,e,a){"use strict";var s=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("v-layout",{attrs:{column:"","justify-center":"","align-center":""}},[a("v-flex",{attrs:{xs12:"",sm10:"",md8:""}},[a("v-card",[a("v-card-title",{staticClass:"headline"},[t._v("Generate a certificate for use by vault")]),a("v-card-text",[a("p",[t._v("Before we're able to have vault issue certificates for us we must first define a role.\n            A role is a logical name that maps to a policy used to generate those credentials. A role \n            defines some default values and rules regarding the issuing/signing of certificates. Any time\n            you need to generate or sign a certificate in vault you need to specify a role. Later, when we \n            look at authentication and policies you will be able to see how we can restrict these roles to\n            certain users. You can see the parameters available when creating a role by running the command\n            "),a("code",{staticClass:"elevation-3"},[t._v("vault path-help vaultcerts/roles/role")]),t._v(". As this role will only be\n            used to generate certificates for vault (Allowing the vault server to run over https rather than http)\n            we are only going to set values which limit the creation of certificates for localhost.\n          ")])])],1),a("ul",{staticClass:"vagrantterm"},[a("li",{staticClass:"command"},[t._v("vault write vaultcerts/roles/demo allow_ip_sans=true allow_localhost=true client_flag=false code_signing_flag=false email_protection_flag=false max_ttl=8760h")]),a("li",{staticClass:"response"},[t._v("Success! Data written to: vaultcerts/roles/demo")])]),a("v-card",[a("v-card-text",[a("p",[t._v("Now that a role has been created, we can use this to create a certificate/private key pair. To\n            avoid having to copy/paste the certificate/key from the output of the command we're going to tell\n            vault to format the output as JSON and save it to a file in our current directory. We can then use \n            a tool such as "),a("code",{staticClass:"elevation-3"},[t._v("jq")]),t._v(" to extract the needed values from the JSON and\n            save them to an appropriate location. jq is already installed on the training VM so the commands\n            should work as is.\n          ")])])],1),a("ul",{staticClass:"vagrantterm"},[a("li",{staticClass:"command"},[t._v("vault write -format=json vaultcerts/issue/demo common_name=localhost ip_sans=127.0.0.1 > localhost-certs.json")]),a("li",{staticClass:"command"},[t._v("cat localhost-certs.json | jq -r '.data.certificate' | sudo tee /etc/ssl/vault.crt")]),a("li",{staticClass:"response"},[t._v("-----BEGIN CERTIFICATE-----\n                            ...\n                            -----END CERTIFICATE-----")]),a("li",{staticClass:"command"},[t._v("cat localhost-certs.json | jq -r '.data.private_key' | sudo tee /etc/ssl/vault.key")]),a("li",{staticClass:"response"},[t._v("-----BEGIN RSA PRIVATE KEY-----\n                            ...\n                            -----END RSA PRIVATE KEY-----")])]),a("v-card",[a("v-card-actions",[a("v-btn",{attrs:{color:"primary",flat:"",nuxt:"",to:{name:"setup-pki"}}},[t._v("Back")]),a("v-spacer"),a("v-btn",{attrs:{color:"primary",flat:"",nuxt:"",to:{name:"setup-config"}}},[t._v("Next")])],1)],1)],1)],1)},o=[],r={render:s,staticRenderFns:o};e.a=r}});
//# sourceMappingURL=certificate.06d8406933d35d8eba33.js.map